body {
    margin: 0;
    overflow: hidden;
    background-color: #000011;
    color: #fff;
    font-family: 'Arial', sans-serif;
}

#threejs-container, #css3d-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
#threejs-container { z-index: 1; }
#css3d-container { z-index: 2; pointer-events: none; }
#css3d-container > div > div { pointer-events: auto; } /* Target the CSS3DObject's HTML element */

/* Info messages */
#info-initial {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0,0,0,0.8);
    color: #fff;
    padding: 12px 22px;
    border-radius: 5px;
    z-index: 100;
    font-size: 16px;
    text-align: center;
    box-shadow: 0 0 10px rgba(0,170,255,0.3);
    transition: opacity 0.5s ease-out;
}

.section-label {
    background-color: rgba(10, 25, 50, 0.75);
    color: #34c0eb;
    padding: 10px 18px;
    border-radius: 8px;
    font-size: 24px;
    font-weight: bold;
    border: 1px solid #34c0eb;
    text-align: center;
    text-shadow: 0 0 5px rgba(0,0,0,0.5);
}

.billboard-html-wrapper {
    max-width: 380px;
}

/* Billboard content base styles */
/* The CSS3DObject's direct child div will have the class from JS */
.billboard-html-wrapper .billboard-content {
    /* DESKTOP STYLES (Original) */
    width: 600px;
    background-color: rgba(10, 20, 40, 0.9);
    border: 2px solid #00aaff;
    border-radius: 10px;
    padding: 25px;
    color: #e8efff;
    overflow-y: auto;
    max-height: 75vh;
    box-shadow: 0 0 20px rgba(0, 170, 255, 0.6);
    font-size: 18px;
    /* Ensure no unintended transforms are inherited from the parent CSS3DObject for desktop */
    transform: none; /* Reset any transforms for desktop */
}

.billboard-content h3 {
    color: #61dafb; margin-top: 0; border-bottom: 1px solid #00aaff;
    padding-bottom: 12px; font-size: 28px; margin-bottom: 20px;
}
.billboard-content p, .billboard-content ul { margin-bottom: 18px; line-height: 1.7; }
.billboard-content ul { padding-left: 25px; }
.billboard-content li { margin-bottom: 10px; }
.billboard-content strong { color: #a0d8ef; }
.billboard-content a { color: #61dafb; text-decoration: none; font-weight: bold; }
.billboard-content a:hover { text-decoration: underline; color: #82eaff; }

/* Navigation Arrows Styling */
#navigation-controls {
    position: fixed;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 101;
  display: flex;
    gap: 20px;
}
.nav-arrow {
    background-color: rgba(0, 50, 100, 0.7);
    color: #61dafb;
    border: 2px solid #00aaff;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s, transform 0.2s;
    box-shadow: 0 0 15px rgba(0, 170, 255, 0.5);
}
.nav-arrow:hover { background-color: rgba(0, 70, 130, 0.9); transform: scale(1.1); }
.nav-arrow:active { transform: scale(1.0); }
.nav-arrow:disabled {
    opacity: 0.4; cursor: not-allowed; transform: scale(1.0);
    background-color: rgba(50, 50, 50, 0.5); border-color: #555; color: #777;
}

/* Mobile View Billboard Adjustments */
@media (max-width: 768px) {
    /* The CSS3DObject's direct child div (wrapper for .billboard-content) */
    .billboard-html-wrapper {
        /* This moves the entire billboard HTML structure relative to its 3D anchor point.
           The values here effectively counteract the JS positioning for billboard3D.position.set(X, Y, Z)
           and billboard3D.rotation.y to place it "under" and centered.
           These values are highly dependent on the billboard3D.scale factor (0.015 in JS)
           and the planetRadius.
           Example: If billboard3D.scale is 0.015, then 1 CSS pixel in the 3D world is 1/0.015 = ~66 Three.js units.
           translateX(-50%) is relative to the billboard's OWN width AFTER it's scaled by its content.
        */

        /* These transform values are applied to the CSS3DObject.element, which is the
           container for your .billboard-content div.
           They attempt to visually place it under the planet.
           We need to counteract the original JS positioning.
           If JS billboard3D.position.set(planetRadius + 4.5, 0.5, 3)
           and billboard3D.rotation.y = -Math.PI / 9
           We need to:
           1. Counter-rotate: rotateY(Math.PI / 9)
           2. Move it from "beside" to "centered X": This is tricky with CSS alone if the 3D X is large.
              Let's assume the JS position sets X relative to the planet.
              If planet is at X=0 in its group, and billboard is at X ~6-8, we'd need to translateX by roughly - (6 to 8) / 0.015 CSS pixels.
           3. Move it "down": translateY by a certain amount.

           This becomes very tricky with pure CSS due to the 3D scaling.
           A simpler CSS approach is to just transform the inner .billboard-content
           assuming its 3D anchor (.billboard-html-wrapper) is roughly where it should be horizontally.
        */
    }

    .billboard-html-wrapper .billboard-content {
        /* MOBILE STYLES */
        width: 90vw; /* Use viewport width */
        max-width: 380px; /* Max width for readability */
        font-size: 16px;
        padding: 20px;
        max-height: 55vh;

        /* This transform is applied to the .billboard-content div itself.
           It shifts the content visually relative to its parent (.billboard-html-wrapper),
           which is the CSS3DObject.element.
           The .billboard-html-wrapper is still positioned beside the planet in 3D space by Three.js.
           We are visually "pulling" the content down from that anchor point.
        */
        transform: translateY(120%) translateX(-50%) rotateY(0deg); /* Changed from 250px to percentage */
        /* translateY(120%) means move it down by 120% of ITS OWN HEIGHT.
           translateX(-50%) helps center it horizontally relative to its new Y position.
           rotateY(0deg) ensures it faces forward (counteracting parent's default rotation if any).
        */
        margin-left: 50%; /* This helps with the translateX(-50%) to center it from the original anchor */

        /* If the billboard is rotated by JS, we need to counter-rotate it here for mobile */
        /* Assuming billboard3D.rotation.y = -Math.PI / 9; from JS */
        /* We would add: transform: rotateY(calc(var(--pi, 3.14159) / 9)) translateY(120%) translateX(-50%); */
        /* But this makes it complex. Simpler to reset rotation and then transform. */
  }
}
